# 引言

## 背景

<!--
The PHP community is in an interesting phase right now and it has for a long time lagged behind on the more traditional software development practices. Practices that have been more or less considered as given in other communities. Continuous integration, package management, dependency injection and adopting object oriented programming to its extent to name a few. But as of PHP 5.3 there are no more excuses to why you can't write modern and clean code. The community have responded to this and a great number of people have stepped forward in supporting this through teaching and building tools for accomplishing these practices.
-->

PHP社区长久以来落后于传统软件开发实践。在其他社区中或多或少会考虑这些实践。持续集成，包管理，依赖注入和面向对象编程。但是PHP5.3提供了更多特性，再也没有写不出现代清晰的代码的接口了。PHP社区也做出了响应并且很多人为了这些实践，在教学和构建工具中做出了很多贡献。

<!--
Yet we seem to forget deployment in this and I feel it's time to bring it to the table for discussion. There are a lot of great tools and services that aid you out there but few resources are available on how to build, maintain and optimize your deployment process. In this book I hope to shed some light on what is important and how it can be achieved.
-->

但是我们好像忘记了部署问题，现在是时候讨论它了。有很多很好的工具和服务帮助可以使用，但是对于怎样构建，维护和优化部署过程却基本找不到。希望本书能提供这些方面的帮助。

<!--
Deploying is not just about pushing changes to a production server but an important part of the [software development process](http://en.wikipedia.org/wiki/Software_development_process). You need to think of every step and every application is unique and need to be dealt with according to that. When working in a team is when you most of all need a great deployment process and the team should work in certain ways to allow for the process to be beneficial for all parties involved.
-->

部署过程不仅仅是将代码变更推送到生产服务器，而是[软件开发流程](http://en.wikipedia.org/wiki/Software_development_process)中非常重要的部分.你需要思考每一步，并且每个应用自身的特殊之处也需要考虑和处理。当在一个团队工作时,是最需要部署流程的，团队应该据此工作，这样团队的每个人都能获益良多。

<!--
Every software application has a life cycle that the deployment process supports and is necessary for. You want to be able to maintain the application, roll out new features and do bug fixes without constant pain and headaches while doing it. You should be able to manage your branches, push your code, run the appropriate tests, migrate your database and deploy the changes in a fast and confident manner. With a good deployment process and a work flow that enables this it will be a breeze. If you can do a fast and easy rollback too, your confidence in pushing code will benefit a lot.
-->

每个软件应用的生命周期中需要有部署流程，此流程为维护应用，发布新特性，bug修复提供支持。应该以一种快速和自信的方式管理分支，推送代码，运行测试，迁移数据库和部署变更。使用好的部署流程和工作流使得达到这个目的变得轻而易举。如果还能快速并且简单的回滚，开发人员对于推送代码的自信会大大增强。

<!--
In a more and more agile software development world being able to deploy is important. Release cycles are getting shorter and shorter and some organisations even push it to the limit with [continuous delivery](http://en.wikipedia.org/wiki/Continuous_delivery). In an environment with short release cycles, the importance of the deployment process intensifies. Not being able to deploy or rollback fast enough could end up slowing you down your entire development.
-->

在越来越敏捷的软件开发世界中，能部署是很重要的。发布周期会变得越来越短，一些组织甚至结合[持续交互](http://en.wikipedia.org/wiki/Continuous_delivery)将其做到了极致。在短的发布周期环境中，部署流程更重要。不能快速部署和回滚会减慢整个开发。

## 读者对象

<!--
You are already familiar with PHP and you're not afraid of the command line. But you could also be a manager of a software development team that deal with deployment on a regular basis.
-->

你需要熟悉PHP开发和命令行。也可以是需要定期发布的项目组的管理者。

<!--
Legacy is not only a code issue but a process issue as well. Are you looking to streamline your deployment process or you want to scrap your current one and start of fresh? Then this book is for you.
-->

遗留系统不仅仅只有代码问题，同时也有流程问题。如果你想让你的开发流程更流畅或者你想另起炉灶，这本书也适合你。

## 超出本书的讨论内容

<!--
I consider server provisioning an almost crucial part of deploying your application but it's too big of a topic for this book. It could without a doubt be a book on its own (and perhaps will be?). I also don't want this book to focus on any framework or tool but keep the content and name broad instead of something like *Deploying PHP application to Amazon Web Services with Chef*.
-->

服务器对于发布流程是很重要的，但是这个主题太大，可以单独成书，本书不做升入探讨。本书也不会聚焦在框架和工具上，比如不会讨论*使用Chef在Amazon Web Services中部署PHP应用*，但是也会探讨一些广泛的内容。

<!--
The tools and commands used will be outside the scope unless it is a deployment tool (then it will have a dedicated section). I will make examples with Git, Composer, Grunt, PHPUnit and various other tools and if you want to learn more about the tools there are a vast amount of books, screencasts and blog posts to find, Google is your friend.
-->

除了部署工具以外，其他工具和命令本书不做探讨。本书会提供Git，Composer，Grunt，PHPUnit和其他工具的例子，如果需要更多信息，可以Google。

## 前提假设

<!--
I know it's not nice to make assumptions about people or software. But I'm still going to do it to some extent in this book. I will make them when I approach examples but I'll not judge you or your application in any way.
-->

尽管对于开发者和软件做出假设并不太好，本书依然会做出一些假设，但是不会对读者本身或你的应用做出任何假设。

#### 部署到哪里

<!--
You will need a hosting environment that you are some what in control of. If you are not able to install software or run commands it will limit you in what you can achieve. Whether it is a hosted server, co-location server or a VPS does not matter but to use everything in this book you need some control over it in terms of installing software, changing configuration, etc.
-->

读者需要一个宿主机环境，并且可以有控制和修改配置的权限（译者注：有sudo权限或者root权限）。如果不能安装软件和执行命令，会受到很多限制。单独的服务器，托管服务器或者VPS都可以。

#### Git

<!--
The base of some of the topics discussed will use Git as version control. Why? Because I think it enables work flows that is best suitable for a good deployment process. There is a chapter on the topic as Git about version control and branching strategy for a good deployment process that could've been named *Git version control*. But I'll leave the name without Git in it since there are perhaps a lot in there that you can apply to other version control systems as well. Other than Git I have worked with Subversion and Perforce but when I found Git and started incorporating it in my work flow I have never looked back.
-->

本书的某些内容会使用Git作为版本控制。对于完善的部署流程来说，引入工作流是非常合适的。有一章以Git作为主题，会讲到优秀的部署流程中的版本控制和分支策略。本来可以将这一章命名为*Git版本控制*，但是实际上可能称之为版本控制，不特别指定Git的原因是因为这些方法也可以用于其他版本控制系统。除了Git，作者也使用过Subversion和Perforce，但是自从将Git引入工作流以后，就再也不需要用过这些工具了。

#### 前端和后端

<!--
There will also be an assumption about your application that it is not only a backend application. If your application is a REST API for example with no frontend what so ever it will not matter though. I will give some general examples on how to manage builds for your frontend as well but all the commands used will be arbitrary.
-->

本书假设你的应用不仅仅是后端应用。如果你的应用是一个REST API后端应用也不要紧。本书同样会给出前端应用构建管理的通用范例。


## 关于作者

<!--
I have been developing PHP applications for over 10 years now. During this time I've developed and deployed a great variety of applications. The scale of these applications have been from a few hundred users to over 250 million users. Currently I'm working as a kind of free agent consultant focused on web architecture while spending the rest of my time on my own projects.
-->

作者有10年PHP开发经验，开发和部署了大量的应用。应用规模横跨了几百用户到超过2.5亿用户。当前作者利用业余时间做关于web架构的免费咨询。

<!--
I'm one of two co-organizers for the meetup group [Laravel Stockholm](http://www.meetup.com/Laravel-Stockholm/) trying to get some nice people together discussing Laravel and PHP concepts in general. I contribute to open source projects as much as possible. Most that is developing and maintaining [Git Pretty Stats](https://github.com/modess/git-pretty-stats) which is a self hosted tool for statistics and graphs of Git repositories.
-->

作者是会议组[Laravel Stockholm](http://www.meetup.com/Laravel-Stockholm/)两个组织人之一，进行讨论Laravel和PHP相关概念的组织工作。作者尽可能的位开源项目做出贡献。大部分时间在开发和维护[Git Pretty Stats](https://github.com/modess/git-pretty-stats)，这是一个可托管的统计和图形化Git仓库的工具。

<!--
Oh, by the way I'm from Stockholm, Sweden. So I'm writing a book in my second language and I would appreciate all the help I can get when it comes to spelling and grammar. If you find anything, please create an issue in [this repository](https://github.com/modess/deploying-php-applications) or fork it, fix it and send me a pull request. Thank you!
-->

作者是瑞典斯德哥尔摩人。所以写本书不是使用的母语，欢迎和感激拼写和语法的上面帮助。如果你发现任何这方面的问题，请在[项目](https://github.com/modess/deploying-php-applications)中创建一个问题，或者fork它，修改然后给我发送Pull Request。多谢。

## 示例代码

<!--
In the [repository on github](https://github.com/modess/deploying-php-applications), you can find code samples structured by chapter. Any substantial amount of code used in the book is available there for reference and use.
-->
在github中的[项目](https://github.com/modess/deploying-php-applications)，你可以按照章节找到范例代码。

## 感激

<!--
My friend and talented designer extraordinaire **Joakim Unge** for the awesome cover image. Look at it, it's a fucking rocket ship! You can find his portfolio at [www.ashbagraphics.com](http://www.ashbagraphics.com).
-->

我的朋友和才华横溢的设计师**Joakim Unge**设计了封面，是一个有趣的火箭飞船！你可以在[www.ashbagraphics.com](http://www.ashbagraphics.com)找到他的作品。

---

<!-- 
My sister and **Jenny Modess** the talented copywriter, for proof reading from a non-technical perspective. Keeping my spelling, grammar and storytelling in check!
-->

我的姐姐，**Jenny Modess**，是一个才华横溢的广告文字撰稿人，从非技术视角校对了本书，保证了拼写，语法的正确。

