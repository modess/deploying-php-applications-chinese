# 2. 目标 {#chapter-goals}

<!--
I really hope you have decided that you want to improve your deployment process. Well, that is probably why you're reading this book at this moment. You should at this point probably establish a few things. Ask yourself the questions of where you currently are, and where you would like to be. These are essential questions in reaching goals, between here and there you should probably set a few milestones as well since sensing that you achieve something is always important. This is starting to sound like a self help book, but I'm of course talking about where your deployment process is and where you would like it to be.
-->

本书希望读者具有优化部署流程的决心，当然，这也是你正在阅读这本书的原因。看看你的项目现在处于哪个阶段以及你想做成什么样。

<!--
We have a few things we need to go through before we get to the actual list of goals. Understanding the background of the various parts will help you better grok the big picture.
-->
在列出具体目标前，还需要更多的思考，有助于更好的理清思路。

## 2.1 出发点

<!--
Take a deep breath and imagine a peaceful lake in your mind. No just kidding, stop with that. This is still not a self help book.
-->
深呼吸，在你的大脑中想象一片平静的湖水。不开玩笑了，这不是一本自我救助的书籍。

<!--
Since the deployment process is just like any other process in the software development cycle it will mature in certain ways. It usually starts at a fairly similar place. This place has seen a lot of developers and it will continue to see a lot of other developers pass by. What I want is to show people what kind of place that is and why you should try to avoid going there. The main reason that place is bad is that it's **at the end** of everything. I realize that I just said that the beginning is at the end, but let me explain what I mean before you call me an idiot.
-->
部署流程就像软件开发周期中的其他流程一样，在踩坑的过程中也会慢慢成熟。这些坑有相似之处。本书想做的就是向读者展示有哪些坑。

<!--
An application usually starts with an idea. Then some wireframes (either mental or actual ones). Then perhaps some design and of course some code. Then the first beta is ready for release. Wow that was fast, but anyway. Success, get the minimum viable product out there! This is where people stop and think "Oh right, we need some kind of hosting", someone with a credit cards pays for the hosting and a developer is tasked with deploying the code to it. Of course that's not a problem for the developer, but usually not much thought will be put into this part. No deployment tools will be used, no automation is put into place. I'm not saying this is the case for all project, but it's a fairly good estimation for most projects.
-->
一个应用通常开始于一个点子，然后有了一些草图（无论是大脑中的还是落笔于纸上的），然后会有设计和一些代码。随后就发布第一个beta版本。看起来很快，但是，为了成功，一定要对点子有最小可行产品。此时，应用开发者可能会停下来然后想到"是的，我们需要主机"，有信用卡的会对购买的主机服务进行付费，最后开发者会将代码部署到主机上。当然，这个流程是没有问题的，但是考虑的还不完善。这里没有使用部署工具，也没有自动化任何事情。本书不是说每一个项目都需要考虑到部署工具和自动化，但是对绝大多数项目来说是应该考虑的。

<!--
Do you see the issue at hand here? **Deployment is in most cases an after thought**. It's something many feel they just have to do and most wouldn't get out of bed earlier on a Monday because they are so eager to set up a sexy deployment process. Usually this will be a "fix things as you go" kind of process with quick and dirty fixes, duct taping that shit if it's necessary. This is something I usually refer to as *duct tape deployment*, and yes you can quote me on that. This is more than often a one man or one woman show and if someone else would like to deploy they wouldn't be able to. They would first have to ask the "one man/woman deploy army" as to how it's done, what the passwords are, which paths are used, where the database is and everything else that comes with it. Efficient? No. Sustainable? No.
-->
读者发现问题了吗？**在大部分情况下，部署都是时候考虑的。**这个感觉就像是周一早上不想早点起床但是不得不起床一样。通常人们的部署流程有点像"随意快速但不合理的修复"的过程，在不得不修复的时候进行缝缝补补。本书通常称这类部署流程为*缝缝补补的部署*。这种不合理的部署流程导致其他人加入，因为其他人不得不询问怎么做，密码是什么，部署路径是什么，数据库在哪里一起其他一些问题。这个过程明显是无效和不可持续的。

<!--
What we need to start with is making the deployment an important part in our applications' lives. It should be there for our application as a supporting and nurturing parent. Would you let your kid go to the first day of school without you being there? Of course not. The school system in the United States is very fond of the *No Child Left Behind Act* and I would like to propose a *No Application Left Behind Act* where no applications is left behind because of a bad deployment process. It might be a bad analogy, since they have a really crappy education system in the United States. But I hope I got my point across anyway.
-->
应该将部署流程作为应用生命周期中的重要组成部分。举个例子，读者会在孩子上学的第一天让他独自一个人去学校吗？当然不会。美国学校系统有*不让一个孩子掉队法案*，本书提出了*不让一个应用掉队法案*，让每一个应用不因为落后的部署流程而不完善。这个类比可能并不合适，因为美国的教育系统还有些问题。

## 2.2 成熟度 {#成熟度}

<!--
During your application's lifetime the deployment process will (hopefully and most likely) mature. That it matures is usually a good thing and somewhere along the line someone will probably realize that steps need to be taken to improve it. In which ways it will mature is usually according to the following but maybe not in this particular order:
-->
在应用的生命周期中，部署流程会逐渐成熟。开发者会逐渐认识到部署流程需要的步骤并且进行改进。下面是使部署流程成熟的一些因素，顺序无关：

* 文档
* 自动化
* 验证
* 通知
* 测试
* 工具
* 监控

<!--
**Documentation**. This is usually what happens when the transition is made from one person deploying to multiple people deploying. It will be a natural step, since the deployment process will most likely have manual steps so you can't deploy without documentation. Somewhere a document or something similar will end up describing the different steps that need to be done in order to deploy.
-->
**文档**. 在部署流程从一人参与到多人参与的转换过程中，文档非常重要。因为部署流程可能有手工步骤所以在没有文档的情况下没法操作。为了顺利部署，都会有一个文档。

<!--
**Automation**. Multiple people are not deploying, but stuff breaks because of inconsistency. Even if all manual steps are documented well, unexpected things will occur that fall outside the scope of the documentation. In these cases it will end up on the one woman/man deploy army since they will have the answers. The response and solution to this is automation. It should be a humble effort to, in the end, automate everything in the process.
-->
**自动化**. 一般情况下不会同时有多人同时部署，但是万一发生这个情况就会造成不一致。就算所有步骤在文档中写的非常明白，一些无法预料的事情任然会发生。解决方案就是自动化部署流程。

<!--
**Verification**. The process has now been automated enough to make anyone able to deploy in a consistent manner. But still it can break in numerous ways and the automation will be altered to handle errors so we can verify that the steps are completed without errors. The deployment can be aborted if any automation fails and display an appropriate message to the person deploying on what went wrong.
-->
**验证**. 在部署流程自动化的情况下，仍然有其他情况导致部署失败。部署流程需要对错误进行警告，这样就能对整个部署流程进行验证，如果所有的步骤都完成了，没有错误，则部署流程才是成功的。如果有错误，部署流程应该可以终止，并且能显示具体是哪里出了问题。

<!--
**Notification**. With verification in place making it notify the right people when it fails should be trivial. Having a deploy fail silently could be catastrophic and deploying the wrong changes could also be very troublesome. A notification on what was deployed (branch, commit, etc) and that it did so successfully can be just as useful as for a failing one.
-->
**通知**. 仅仅依靠验证来在发布时显示错误信息是不够的。如果发布失败而不进行通知有可能是灾难性的，另外部署错误的修改也是让人讨厌的。在部署后，将部署的情况（分支，提交等具体情况（译者注：比如版本号，有哪些修改等等））进行通知也是很重要的。

<!--
**Tools**. It seldom happens that a deployment process will use tools from the start. With a stable process that works in most cases but is difficult to extend, tools will most likely be put in place. Adding commands to run with a deployment tool is usually a lot easier than changing the scripted automation and will leave the scripts obsolete and replace them. It will often also replace the documentation part since it will more or less document itself, if done correctly.
-->
**工具**. 从一开始就使用工具的部署流程比较少见。稳定的的部署流程中使用工具比较常见。在部署工具中添加命令比修改自动化脚本要容易，这样就淘汰了过期脚本并且完全可以替代自动化脚本。如果用的号，工具也可以起到替代文档的作用。

<!--
**Monitoring**. This is a step few will actually reach and is definitely more of a *nice to have* than a *need to have* maturity. It's about monitoring how the application and its environments responds to a deploy. The monitoring could monitor CPU usage, memory usage or I/O-operations. If a deploy increases memory usage by 30% you might have a big problem on your hands. So the goal here is to monitor and notify on big deviations for certain key metrics.
-->
**监控**. 大部分的部署流程中没有这一步，这一步不是必须的，而是建议的。具体就是监控部署后应用和系统的状态。可以监控CPU使用量，内存使用量或者I/O操作数。如果部署后导致内存使用增加了30%，那么说明出问题了。目标是在关键的一些指标出现大的偏差后进行监控和通知。


## 2.3 敏捷

<!--
The world around us as software developers is getting more and more agile. I'm talking about the world of [agile software development](http://en.wikipedia.org/wiki/Agile_software_development), not the regular outside world where people drink lattes and worry about their mortgages. More and more companies are jumping on the agile bandwagon and for a good reason. There are some practices in this that are great, such as behaviour-driven development (BDD), test-driven development (TDD), pair programming, continuous integration, sprints, user stories and cross-functional teams just to name a few.
-->
软件开发越来越敏捷。本书中敏捷指[敏捷软件开发](http://en.wikipedia.org/wiki/Agile_software_development)。越来越多的公司进行着敏捷软件开发。其中的一些时间是很不错的，比如行为驱动开发（BDD），测试驱动开发（TDD），结对编程，持续集成，Scrum等等。

<!--
> Agile: "Characterized by quickness, lightness, and ease of movement; nimble."
-->
> 敏捷: "特性有快速，轻量，易于运转，灵活。"

<!--
This sums it up pretty well because you want your software development cycle to be fast, easy and adaptable where you work in small increments and respond quickly to feedback through iteration. At the beginning of 2001, a bunch of very smart people got together to talk about lightweight development methods and what they ultimately came up with was the publication [Manifesto for Agile Software Development](http://agilemanifesto.org/), this is the main part of it:
-->
让软件开发流程快速，简单和适用是在快速迭代中需要的。在2001年初，一些聪明人聚在一起讨论轻量级开发方法，最终发布了[敏捷宣言](http://agilemanifesto.org/)，下面是他的主要内容（译者：敏捷宣言已经国内已经有专家翻译了，这里限于水品不翻译）：

> We are uncovering better ways of developing software by doing it and helping others do it. Through this work we have come to value:

> **Individuals and interactions** over Processes and tools
>
> **Working software** over Comprehensive documentation
>
> **Customer collaboration** over Contract negotiation
>
> **Responding to change** over Following a plan
>
> That is, while there is value in the items on the right, we value the items on the left more.
>
> *Kent Beck, James Grenning, Robert C. Martin, Mike Beedle, Jim Highsmith, Steve Mellor, Arie van Bennekum, Andrew Hunt, Ken Schwaber, Alistair Cockburn, Ron Jeffries, Jeff Sutherland, Ward Cunningham, Jon Kern, Dave Thomas, Martin Fowler, Brian Marick © 2001, the above authors. This declaration may be freely copied in any form, but only in its entirety through this notice.*

<!--
This is really exciting stuff and if you take a look at what is valued in the items on the left it's people, flexibility and speed. Flexibility and speed of the actual development and people is both about the people building the software and the people using the software.
-->
这是一件让人激动的事情，宣言中的人，柔韧性和开发速度有价值，这涉及到软件本身和使用软件的人。

<!--
Now you might say that I have been talking about the deployment **process** a lot and the manifesto clearly states that it favours individuals and interactions over processes and tools. Yes, this is true; however it also states that there is value in the items on the right and I consider the deployment process to be essential in supporting a true agile development process. The core in agility for software development is iteration, an ability to adapt quickly and respond to feedback from people. How will you be able to do this efficiently without a good deployment process? If you iterate over a feature and spend two hours on it and then have to spend two hours deploying it, is that really agile? I would argue no. Even if the deploy takes "only" 30 minutes you need confidence in it and if there are many manual steps or you can't do a quick and easy rollback, what is agile about it then?
-->
敏捷软件开发的核心是迭代。如果没有好的部署流程，是应对不了的。如果一次迭代本身耗费了2个小时，但是部署也耗费2个小时，很明显就不是敏捷软件开发了。

## 2.4 马拉松式计划

<!--
What could be better in all this than doing a comparison with a marathon? In an agile world you work in sprints and if you plan your deployment process for the current sprint your plan will be very short sighted and situational. If you expect your application to live longer than for a few sprints you need a plan for its future. So plan for a marathon, not a short sprint.
-->
没有比类比马拉松更形象的了。在敏捷世界中，以sprints（译者注：国内对sprints一般不进行翻译，或者我不知道怎么翻译？）进行工作，仅仅对当前的sprints计划部署流程是非常短视和片面的。所以做马拉松式的计划。

<!--
Making estimations is just as hard whether you make it for your development time or your application's future. This is especially true in the agile world where adapting quickly to feedback could change the direction of that future in a heartbeat. But we should at least try to do this. Try to make some predictions about where your application could end up. Coming up with a few scenarios that could occur will not harm you.
-->
无论是预估开发时间还是预估应用的未来，都是非常难的。特别是在敏捷开发中需要对反馈做出快速调整更是如此。但是至少我们要试一试。尝试做出预测。想想一些场景的应对情况是有好处的。

<!--
Say you deploy your application to a VPS with limited resources and no real options to scale it quickly. If you predict there is a possibility your application would get featured on Hacker News, Reddit, Product Hunt or Slashdot and the traffic goes through the roof, now what? Do you have a deployment process that is good enough for quickly moving your application to a new hosting provider? Does your application and deployment process support running on multiple nodes? Just to be clear, I'm not saying you should make your deployment process deal with all the possible scenarios since that would be extremely time inefficient. What I'm saying is that you should keep those scenarios in the back of your head while you plan and implement with a "if X happens, I can change this easily to fit it"-mentality. Your deployment process should be agile too and try to make it so you can change things fast and easy.
-->
假如一个应用部署到了资源受限的VPS上，并且不能扩展。如果应用被Hacker News，Reddit等推荐，流量到达了上限，怎么办？如果有一个部署流程可以将应用快速移到新的主机提供商，可以解决这个问题。如果应用和部署流程支持运行在多个节点上，也可以解决这个问题。当然，本书并不是说应该让部署流程处理所有可能的情况，本书想告诉读者应该将这些情况考虑到，简单总结就是“如果情况X发生，我可以很容易的满足。”。部署流程应该也是敏捷的。

## 2.5 发布周期
<!--
You can write how much code you like, but if you're not shipping any of it you're not contributing with any value. You and your team should have a goal of how often you want to release code. Whether it be once every month or four times a day, as long as you have a goal and a plan for it. If you do not have a goal for it you can't reach something. So set a goal if you do not have one and try to get there. Knowing your current and your wanted release cycle is important for planning your deployment process.
-->
开发者可以想写多少代码就写多少代码，但是如果不发布，就没有创造任何价值。开发者和开发团队应该有发布代码频率的目标。无论是每个月或一天4次，只要开发者有一个目标和计划即可。如果没有目标，则什么都完不成。所以，如果还没有目标，就设定给一个目标然后尝试达到目标。明确当前的和想要的发布周期对于计划部署流程是非常重要的。


<!--
There are a few ways in which we ship code and the different models of it can be summed up to:
-->
针对不同的模型，有不同的发布代码的方式:

<!--
* I'm done, ship it.
* The new version is done, ship it.
* X amount of time has passed, ship it.
* I pushed it, ship it.
-->
* 开发者完成，发布
* 新版本完成，发布
* 一段时间过去了，发布
* 推送完成，发布

<!--
This is of course simplified and there are many variants of these out there in the wild. But let's discuss these individually to see what they're about.
-->
详细说明一下这四种模型。

<!--
**I'm done, ship it**. We could call this *feature deploy* or *shotgun deploy* depending on how we feel about it. This is a typical model for when there is one or few developers for an application. It's an ad-hoc type of deploy and when you have finished and tested your feature you deploy it. I think this is a very underestimated type of deploy if you can make sure that you do not push changes someone else has made. Why should we wait for a ritualistic deploy? If you version control with a good branching strategy these types of ad-hoc deploys are definitely possible. For larger teams and applications this is something I wouldn't recommend though.
-->
**开发者完成，发布**. 可以称之为*特性发布*或者*猎枪部署*。这是只有一个或者少数几个开发者应用的典型模型。当完成特性开发并测试完成后就可以发布。但对于更大的团队和应用，这种模型就不适用了。

<!--
**The new version is done, ship it**. This would be when your software has reached a new version, either minor or major. The point here is that the deploy payload will probably be large and the development has been undergoing for a considerable amount of time. I would avoid this model like the plague when it comes to web applications. One of the great advantages of web applications is the ability to change the application quickly without having to go through build steps and knowing your users have updated their applications. On the web you ship your code and then your user doesn't have a choice. Why even deploy only after a minor version is completed? If you are doing this, one of the reasons could be that the deployment process is to complex. Fix it and stop pushing like this.
-->
**新版本完成，发布**. 当应用有新的版本，无论大版本还是小版本，可以使用这个模型。需要注意的是发布的消耗会比较大，开发完成时间会比较长。在web应用中应该避免使用这个模型。web应用比较明显的优势是能够快速修改并且没有构建步骤，并且控制用户访问的版本。在web上，开发者可以发布代码，用户没办法控制。

<!--
**X amount of time has passed, ship it**. If your team is working in sprints this is probably how you deploy. Whenever a sprint is complete you deploy. The amount of time between deploys can vary depending on how long sprints you have of course and the main take here is that deploys happen on a recurring time, for example every other week on Mondays. I do not mind this model for deployment at all if you have reasonable sprint durations. If you have three month sprints it could be bad and should take a look at why you're doing this. But if you have sprints of perhaps 1-2 weeks, go for it.
-->
**一段时间过去了，发布**. 如果团队使用sprints进行敏捷开发，可以使用这个模型。当sprint完成后，就可以发布。两次发布之间的间隔时间依赖于完成sprint的时间。比如每个间隔周的星期一。如果有个合理的sprint持续时间，本书建议使用这个模型。如果sprint的持续时间在三个月，那就不太合理了。如果有1-2周的sprint，可以使用这个模型。

<!--
**I pushed it, ship it**. Also known as *continuos deployment*. Ah, the unicorn of deploys. Here everything is deployed when one or more commits are pushed to a location. This is done through (at least should be) a very complex system of automation with testing and monitoring. The topic of how you can accomplish this is not an easy one and I will not try to explain it here.
-->
**推送完成，发布**. 也称之为*持续发布*，部署的独角兽。当一次或多次提交推送后就可以发布。这个模型需要复杂的自动化测试，监控系统。

<!--
One important point to make here is that being able to continuously deploy is living the dream. Very few will have time, knowledge and patience to set up a complete process of continuos deploys. However it's something that we can strive for even if you do not want to continuos deploy. Building a culture, environment and process where it's possible will benefit you tremendously. Having the correct tools in place for automation, monitoring, etc will never be a bad thing. If you could have it all and just flip off the switch that deploys everything automatically, you should have a sense of bliss and serenity. You've done it.
-->
需要强调的是持续发布是一个梦想。很少有团队或应用有时间，知识和耐心来建立完善的持续发布流程。但是这是一个目标。构建一个持续发布的文化，环境和流程是有极大好处的。使用正确的工具来自动化，监控等不在是坏的事情。

## 2.6 技术债务和软件腐烂

<!--
Technical debt and software rot is something well known and talked about in the developer community, but the concepts can be applied to more than code. We should take care of our deployment just as much as our code. When an ad-hoc deployment process is put in place we immediately start hoarding technical debt and when it starts to rot  we have **shipping rot**. The problem with this kind of debt and rot is that it's more than usually exponential and self enforcing. Have you heard of the [broken window theory](http://en.wikipedia.org/wiki/Broken_windows_theory)? The TL;DR version is: when people see that a building has a broken window, they stop caring less about maintaining it and into the spiral it goes. This applies perfectly to software development where legacy code stays legacy and bad code breeds more bad code. The same goes for our deployment process: a bad process will stay bad or get worse. If you can stop that first window from breaking or quickly repair it, everyone else will care for that it stays that way. Having goals set is a great tool for quickly dealing with that broken window and if you at some point realize that there are many broken windows, you should perhaps fix them all in one big swoop.
-->
技术债务和软件腐烂在开发者社区中经常讨论，但是此概念可以应用于除开代码之外的其他地方。可以将对待代码的态度用来对待部署。当随意部署时，就开始积累技术债务了，软件也开始腐烂了。造成这类的技术债务和腐烂的问题是过快的频率和不管三七二一的随意上线。[破窗效应](http://en.wikipedia.org/wiki/Broken_windows_theory)。以一幢有少许破窗的建筑为例，如果那些窗不被修理好，可能将会有破坏者破坏更多的窗户。最终他们甚至会闯入建筑内，如果发现无人居住，也许就在那里占领、定居或者纵火。对于部署流程同样适用：一个不好的部署会变得更不好。如果第一个破窗被快速修复，其他人也会注意到，并且保持这种状态。设定快速修复破窗的目标是一个很好的工具，如果意识到有很多破窗，会快速的修复它们。

## 2.7 列表 {#目标列表}

<!--
We can condense the goals in to a bullet list since everybody likes a clear and concise list, right? When reading the list, try to reflect on where you currently are at the different goals.
-->
可以将上面讨论的目标列出来，在阅读列表式，读者看看思考一下现在自身处于什么状态。

<!--
* Automated
* Responsive
* Atomic
* Reversible
* Simple
* Fast
* Agnostic
-->
* 自动化
* 响应
* 原子
* 回滚
* 简单
* 快速
* 系统环境不可知


<!--
**Automated**. Have you read the first chapter? If not, do it. Not having an automated process is the root of all evil.
-->
**自动化**. 第一章详细论述了自动化的相关问题。没有自动化的流程是麻烦的根源。

<!--
**Responsive**. A good deployment process responds to what is happening. If an error occurs somewhere it should abort and notify you or the appropriate people somehow. Having steps fail silently in a chain can be very destructive for your application.
-->
**响应**. 好的部署流程对发生的事情做出响应。如果错误发生了，应该停止并且通知开发者和相关人。 出现了错误而不通知会造成麻烦。

<!--
**Atomic**. Nothing in your deploy should be able to break your application and you should comply with the concept of completing a build before serving it to any user. The transition between the previous and the new build should be as close to instant as possible.
-->
**原子**. 部署过程不能损坏应用，交互给用户的必须是应用的完整版本。老版本和新版本的转换应该是及时的。

<!--
**Simple**. Everyone should understand it and use it. Everyone should feel confident and comfortable with it. This is true for deploying, making changes or extending the process.
-->
**简单**. 每个人都应该理解并实践这个理念，这样才能自信和舒适。对于部署来说也是如此，可以修改和扩展流程。

<!--
**Reversible**. Because it sounds better than "rollbackable". Being able to roll back is just as important as deploying your changes and this reverse process should also follow the list of goals.
-->
**回滚**. 和部署新的版本一样重要，回滚流程也应该满足这里列出的目标。

<!--
**Fast**. You want it to be fast because speed is key in being able to deploy often. Fast rollbacks combined with fast deploys is another key which spells confidence. If something breaks you can easily go back and fix things without that stress knowing production is in a broken state.
-->
**快速**. 为了经常发布，需要保证部署速度是足够快的。快速回滚和快速部署也会带来自信。如果出现了问题，可以快速回滚并修复，就可以缓解问题带来的压力。

<!--
**Agnostic**. Building a deployment process that is dependent on its environment could be devastating. Being able to only deploy to Amazon Web Services for example will be great until you want to switch provider. The application should happily be deployed anywhere and it should also be agnostic about who or what is deploying.
-->
**系统环境不可知**. 依赖系统环境来构建部署流程是毁灭性的。例如只能部署到Amazon Web Services，在需要部署到其他系统中时会出问题。
