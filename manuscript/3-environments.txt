# 3. 环境

<!--
Having multiple environments for your application is essential for quality. Each environment serve a certain purpose and represents a state of your application in some way. When I talk about an environment I mean in which your application lives, that could be separate servers or virtual machines. Having multiple environments running on one machine is not an issue if they are separated but they must be it in some way to prevent them from interfering with eachother. If two of your environments are sharing the same database or cache, you could end up with unexpected results and even create bugs that didn't exist in the first place.
-->
为应用准备多个环境是非常必要的。每个环境有特定的用途，表明应用某个时间的状态。环境可以是单独的服务器，也可以是虚拟机。一台物理机器上搭建多个环境也是可以的，但是需要注意环境之间是分离的并且相互之间隔离开来。如果两个环境共享同一个数据库或者缓存系统，可能会导致问题。

## 3.1 可重复

<!--
Being told you're a "broken record" isn't fun but for your environments it's the best thing you could say. The most important thing to strive for with your environments is that they always have the same setup where operating system and software should be of the same version and have the same configuration. And in a best case scenario they are **repeatable through automation**.
-->
如果某个人被认为是"喋喋不休，重复一遍又一遍的"，那是很无趣的，但是对环境来说，这恰恰是最好的。一定要让不同的环境使用相同的操作系统和软件，版本号和配置文件都要一致。最好使用自动化工具来生成环境。

<!--
Many times have I encountered unexpected behaviour because of environments differing from each other. Some operating systems, CentOS for example, treat file names case sensitive while others like Ubuntu treat them case insensitive. This could end up with files not being read into your application. Another good example is how JSON is encoded/decoded; some environments will encode `0` to `"0"`. If your application is expecting an integer and will get a string then things can go wrong.
-->
很多时候遇到的问题都是由于环境之间的差异造成的。一些操作系统，比如CentOS,对文件名大小写敏感，但是Ubuntu对文件名大小写不敏感。这会导致应用读入文件的时候出问题。一些环境，在JSON编解码时，会将`0`编码为`"0"`，如果应用需要整数而不是字符串，就会出问题。

<!--
Knowing that your application will behave the same in your various environments is great because then you do not have to think about it. *Removing uncertainty* is important for gaining confidence in your deployment process.
-->
明确应用在不同的环境中行为是一致的非常重要。在部署过程中，一定要*去除不确定性*，这样会增添信心。

### 服务器配置

<!--
I said before that this topic is outside the scope of this book but I still want to touch briefly on it. If you want to achieve repeatability in your environments to the point where all your environments are all the same: you need it. Server provisioning is automating your environments. Say you're firing up a new virtual instance or installing a new server, what are your next steps? Often they are:
-->
前面的章节写到过这个主题超出了本书内容，但这里仍然进行简短的说明，为了保证环境的可重复，还是很重要的。使用自动化来配置服务器。加入有一个新的虚拟机或者一台新的服务器，接下来做什么了？通常的步骤是：

<!--
* Install software
* Set configuration values for the software
* Set up a service or application
* Configure the service or application
* Serve the service or application
-->
* 安装软件
* 配置软件
* 创建服务或应用
* 配置服务或应用
* 启动服务或应用

<!--
If you do this manually you will inevitably loose control of how to repeat it. Making sure that correct values are set in `php.ini` across all servers will never be maintainable if done in a manual fashion. The more environments you have, the tougher it will become. Need to update the file size upload limit on 78 server instances? Have fun. Perhaps get an intern.
-->
如果手工进行上面的步骤，在新的环境中操作时很可能出现失误。在所有的服务器上人工来确定`php.ini`文件中的参数是不可维护的。随着服务器的增多，情况会变得越来越糟。如果需要再78台服务器上更新上传文件大小限制的参数会怎么样了？简直是一个灾难。

<!--
There are a number of tools for server provisioning. The current most popular ones are [Chef](https://www.getchef.com/), [Puppet](http://puppetlabs.com/) and [Ansible](http://www.ansible.com/). The latter have gained a lot of traction lately. I suggest you read up on them and take a look at what problems they try to solve and how they solve them. They can help you with taking your deployment process to the next level.
-->
有很多工具来做服务器配置。当前最流行的是[Chef](https://www.getchef.com/), [Puppet](https://puppetlabs.com/) 和 [Ansible](https://www.ansible.com/)。建议读者关注一下这些项目，看看它们关注的问题以及解决问题的思路。这样可以帮助读者将部署流程提升到一个新的高度。

## 3.2 配置 / 环境变量
<!--
An important aspect of environments is configuring your application for the environment it's running in. Separation of code and configuration is a part of the [twelve-factor app](http://12factor.net/config) and it explains the importance of this separation as:
-->
配置环境的一个重要方面就是在运行环境下配置应用。将代码和配置分离是[twelve-factor app](http://12factor.net/config)的一部分，分离的重要性是:

<!--
> Apps sometimes store config as constants in the code. This is a violation of twelve-factor, which requires strict separation of config from code. Config varies substantially across deploys, code does not.
-->
> 应用有时候将配置存储为代码中的常量。这违反了12因素，应该将配置和代码严格的区分开来。配置在不同的部署环境中是不一样的，代码是相同的。

<!--
The distinction between code and configuration is important since your application should be able to run  without depending on configuration in your repository. They state a simple but powerful question to this, which is *can you at any given time open source your application without compromising any credentials?* If you could in theory do this you have a strict separation of code and configuration and I'll show you how to do this with a simple and great tool called *PHP dotenv*.
-->
代码和配置之间的差异是很重要的，特别是应用应该不依赖代码库中的配置就能运行。经常会被问到的一个简单问题是*你能在任意时间开源你的应用而没有妥协？*只有严格区分代码和配置才能做到。本书会展示基于*PHP dotenv*这个工具来轻松的做到。
<!--
The goal is to supply your application with configuration that is outside of the repository and this could be any important hostnames or credentials for database connections, cache connections or third party services such as *S3*, *IronMQ* or *MailChimp*.
-->
目标就是让应用代码和配置进行分离，并让配置处于代码库以外。配置可以是重要的域名，数据库连接信息，缓存连接信息或者第三方服务的连接信息。

### PHP dotenv

<!--
This tool is probably all you need for your configuration requirements, it's  simple yet powerful. It does not require you to edit any virtual hosts in Nginx or Apache nor add or modify any PHP configuration values. All you do is create a file with variables in a key/value manner and it populates the global variables `$_ENV` and `$_SERVER` for you and also makes them accessible via the [`getenv()`](http://php.net/manual/en/function.getenv.php) function.
-->
此工具满足对于配置相关的所有需求，虽然实现简单但是却异常强大。不需要编辑修改nginx或者apache的虚拟主机的任何配置，也不需要修改php的任何配置参数。唯一需要做的就是创建一个文件，文件中是键/值形式，这些键/值被注入到了`$_ENV`和`$_SERVER`中，可以通过[`getenv()`](http://php.net/manual/en/function.getenv.php) 函数进行访问。

<!--
Installation is done through Composer:

    composer require vlucas/phpdotenv
-->
通过Composer进行安装:
```sh
composer require vlucas/phpdotenv
```
<!--
Then you need to bootstrap the configuration loading. In this example we pass `__DIR__` to it which tries to locate the configuration file in the same directory as the executed file, but this could be replaced with any directory you want to store your configuration file in:

{lang="php"}
~~~
$dotenv = new Dotenv\Dotenv(__DIR__);
$dotenv->load();
~~~
-->
然后再代码中引入配置。下面的例子传递`__DIR__`，意思是配置文件与当前执行的PHP文件处于同一个目录下。当然，可以根据实际情况传入适当的目录。

{lang="php"}
~~~
$dotenv = new Dotenv\Dotenv(__DIR__);
$dotenv->load();
~~~

<!--
After this we create a file called `.env` in the directory we supplied and for the sake of an example we add our database configurations to it:

~~~
DATABASE_HOST=localhost
DATABASE_USERNAME=user
DATABASE_PASSWORD=password
~~~
-->
然后，在对应目录下创建一个`.env`文件，比如提供数据库配置:

~~~
DATABASE_HOST=localhost
DATABASE_USERNAME=user
DATABASE_PASSWORD=password
~~~

<!--
We can now access these configuration values in our application and all three of these return *localhost*:

{lang="php"}
~~~
$databaseHost = getenv('DATABASE_HOST');
$databaseHost = $_ENV['DATABASE_HOST'];
$databaseHost = $_SERVER['DATABASE_HOST'];
~~~
-->
现在可以在应用中访问配置，下面的三种写法都是等价的:

{lang="php"}
~~~
$databaseHost = getenv('DATABASE_HOST');
$databaseHost = $_ENV['DATABASE_HOST'];
$databaseHost = $_SERVER['DATABASE_HOST'];
~~~

<!--
I recommend using `getenv()` or even better writing a wrapper function that allows you to pass a default value if the configuration value isn't set (inspired by Laravel's [env()](https://github.com/laravel/framework/blob/a1dc78820d2dbf207dbdf0f7075f17f7021c4ee8/src/Illuminate/Foundation/helpers.php#L626) function).

{lang="php"}
<<(code/chapter-3/env-function.php)

This allows you to fetch a configuration value or get a default value

{lang="php"}
```
$databaseHost = env('DATABASE_HOST', 'localhost');
```
-->
建议使用`getenv()`或者写一个能传递默认值的包装函数(Laravel的[env()](https://github.com/laravel/framework/blob/a1dc78820d2dbf207dbdf0f7075f17f7021c4ee8/src/Illuminate/Foundation/helpers.php#L626) 函数)。

{lang="php"}
<<(code/chapter-3/env-function.php)

这里的env函数可以获得一个配置，当没有此配置时，获得一个默认值localhost。

{lang="php"}
```
$databaseHost = env('DATABASE_HOST', 'localhost');

<!--
Make sure your configuration file is ignored in your repository so it doesn't get committed. Remember the part where you should be able to, at least in theory, open source your application without compromising any credentials.
-->
在代码库中一定要确认配置文件被忽略而不会被提交。这样，就算开源代码，也不会导致配置的一些敏感信息被泄露。

<!--
I> ### Example configuration file
I>
I> For reference and easy setup create an example configuration file that you can copy and replace the values from. Create `.env.example` that contains all necessary keys you need for your application.
-->
I> ### 配置文件模板
I>
I> 为了更容易创建配置文件，可以创建一个配置文件的模板，这个配置文件包含所有的配置信息，但是可以将配置的值信息留空。（译者注：这个模板文件应该提交到代码库中）

## 3.3 本地环境

<!--
Having a local development environment is something you should strive for. With local I mean on your actual computer, not on a centralized server somewhere you access through a VPN service or similar. Being able to work on your code anywhere without an internet connection is nice.
-->


I always run my local development environment in a virtual machine with [Vagrant](http://www.vagrantup.com). This allows me to go haywire with everything and if I fuck up the environment badly enough I just destroy the virtual machine and provision it from scratch. It's great for testing things in your environment without having to worry about breaking something on your computer or for someone else. Want to test your application in a different PHP version for example? Install, test, reset.

The main point is that you want to be able to work on your application whenever. With a local environment you can work on a flight across the atlantic and push/pull changes as soon as you get a connection to the internet. If you end up in a situation where you are dependent on an internet connection to work you'll curse yourself when you don't have one.

Having your local environment repeatable is the number one tool for introducing new team members to your code. Imagine you start at a new job and all you do it `git clone <insert vagrant repository here>` and then a `vagrant up` and you're all set. Sounds like a dream doesn't it? Usually time is invested in writing documentation for setting up a local environment and that documentation is more than often outdated and no one really wants to take responsibility for keeping it updated.

## 3.4 Development environment

The name of this one can be somewhat misleading. No development work should be done here but the name comes from the branching strategy in [chapter 6 on Version Control](#chapter-version-control). This is a common ground for features and bug fixes where all code that should be shared and tested by others will end up here. The first step after finishing something in your local environment will most often be to merge it to your main branch and push it to the development environment.

It's a great place for early testing by yourself and your team. Getting an extra set of eyes on something early on can be a great quality tool. Code reviews should be performed before something is merged and pushed to this environment since it's a very effective tool for quality, knowledge sharing and stomping out some obvious errors. All developers will have certain domain knowledge and someone else could perhaps tell right away if your code won't work with a specific part of the domain.

## 3.5 Staging environment

Your staging environment is very important and it should to the fullest extent possible duplicate your production environment. This is where you do your final testing of your code before you push it to production and serve your application to the users.

With duplicate to the fullest extent I do not mean that it should connect to the production database for example. Having a database that gets updated with a production dump every 24 hours is good enough. Does your application have multiple database instances and perhaps connect to a cache cluster? The staging environment will need that as well. Is the application running on multiple nodes behind a load balancer? Set up your staging environment in the same say. Remember, **as close to the production environment as possible**.

Being able to test against production data is sometimes necessary but be extremely careful when doing this for obvious reasons. Make sure you do not test features that for example could end up e-mailing users. Your staging environment should perhaps only allow outgoing e-mail to certain addresses that belongs to people in your team or in your company. Here is a simple example that logs the e-mail if it's not in production:

{lang=php}
~~~
function sendEmail ($to, $from, $subject, $message) {
    $productionEnvironment = (getenv('ENVIRONMENT') === 'production');
    $internalEmail = (strstr($to, '@yourapplication.com') !== false);

    if (!$productionEnvironemnt && !$internalEmail) {
        $log = sprintf(
            'Sending "%s" e-mail to %s from %s',
            $subject,
            $to,
            $from
        );
        error_log($log);

        return true;
    }

    $headers = 'From: ' . $from . "\r\n" .
        'Reply-To: ' . $from;

    return mail($to, $subject, $message, $headers);
}
~~~

## 3.6 Production environment

This one is quiet obvious and it's the server(s) serving your application to your end users. Whether it's one server or multiple ones behind load balancer; this is the endpoint for your users.

It will contain an as stable as possible code base with code that is extensively tested and as bug free as possible. What is to be said here is that **it's for this environment we need a great deployment process**. All the effort we put in to the process will reflect on the quality and stability of your production environment.

## 3.7 Testing environment(s)

Having one or multiple test environments is not obligatory but it is something that can bring a lot of benefits for your application. Depending on the size of your application it will make testing a lot easier. If you are able to set up test environment for specific branches for example, you can easily give access to testers for feature branches.

There are a few things that are essential for having success with test environments: speed and repeatability. If you can without major effort set up a test environment and check out a certain branch, your testing possibilities will increase dramatically. When I say speed I would consider 30 minutes or less a reasonable amount of time. Longer than that and you can start to experience too big discrepancies in development speed and test environment speed. Also If you're not able to update your test environment with the latest changes it will hardly be worth your time. The loop here is to get quick feedback on your code and react to it. Fix the code, push to the test environment again and then get new feedback.

## 3.8 Simplify server access

In the process of managing multiple servers you end up wanting to make access to them faster and easier. First of all creating host entries for your various servers will remove the need of looking up IP addresses. For some servers you won't need it since they will be publicly accessible through domains such as your production environment. But even for your production environment you might have servers for databases, load balancers, caches, etc and they might not be accessible through a public domain. But you will still need to access them on a regular basis for maintenance and debugging so create host entries for them.

The second thing is setting up and maintaining your SSH configuration file. In this you can manage hosts, hostnames, keys, ports and everything else you need to simplify your access to the servers. Compare these commands and you'll realize that you can gain a lot by this:

```
ssh -i ~/.ssh/myapp-staging.key staging@123.123.1.9 -p 2223

# instead when using configuration file:

ssh myapp-staging
```

All we need for this is to create `~/.ssh/config` and add our configuration for our environments there. For the previous example it could look like this, with host entries added and expanded for covering multiple environments:

```
Host myapp-staging
    HostName staging.myapp.com
    Port 2223
    User staging
    IdentityFile ~/.ssh/myapp-staging.key

Host myapp-staging-db
    HostName staging-db.myapp.com
    Port 2223
    User staging
    IdentityFile ~/.ssh/myapp-staging.key

Host myapp-production
    HostName myapp.com
    Port 2224
    User production
    IdentityFile ~/.ssh/myapp-production.key

Host myapp-production-db
    HostName db.myapp.com
    Port 2224
    User production
    IdentityFile ~/.ssh/myapp-production.key
```

As you can see, multiple hosts can be defined and you can create one for each of your servers that you manage often. This will save you lots of time in accessing the servers. There are even more cool stuff you can do with it such as specifying wild card hosts and more. You can do some further reading on the [man page for ssh_config](https://www.freebsd.org/cgi/man.cgi?query=ssh_config&sektion=5).
